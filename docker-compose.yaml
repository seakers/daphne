services:
  daphne:
    build:
      dockerfile: ./build/Dockerfile
      context: .
    image: daphne:test
    volumes:
      - type: bind
        source: ${ROOT_DIR}/codebase
        target: /app/daphne
      - type: bind
        source: ${ROOT_DIR}/build/scripts
        target: /app/scripts
      - type: bind
        source: ${ROOT_DIR}/logs
        target: /app/logs
    ports:
      - "8080:8080"
      - "8000:8000"
    environment:
      - VASSAR_REQUEST_URL=http://localhost:9324/000000000000/vassar_request
      - VASSAR_RESPONSE_URL=http://localhost:9324/000000000000/vassar_response
      - GA_REQUEST_URL=http://localhost:9324/000000000000/ga_request
      - GA_RESPONSE_URL=http://localhost:9324/000000000000/ga_response
      - DEPLOYMENT_TYPE=local
    depends_on:
      - postgres
    tty: true
    container_name: daphne_server
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=daphne
      - POSTGRES_PASSWORD=daphne
      - POSTGRES_DB=daphne
    volumes:
      - ${ROOT_DIR}/databases/pgsql:/var/lib/postgresql/data
    container_name: daphne_database
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    container_name: daphne_redis
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
      - "5671:5671"
    hostname: "my-rabbitmq"
    container_name: daphne_rabbitmq
  neo4j:
    image: neo4j:latest
    ports: 
      - "7474:7474"
      - "7687:7687"
    container_name: daphne_neo4j
    volumes: 
      - ${ROOT_DIR}/databases/neo4j/data:/data
      - ${ROOT_DIR}/databases/neo4j/logs:/logs
    environment: 
      - NEO4J_AUTH=neo4j/test
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "6001:80"
    container_name: daphne_pgadmin
    environment: 
      - PGADMIN_DEFAULT_EMAIL=daphne@daphne.com
      - PGADMIN_DEFAULT_PASSWORD=daphne
  graphql:
    image: hasura/graphql-engine:latest
    ports:
      - "6002:8080"
    depends_on: 
      - "postgres"
    restart: always
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://daphne:daphne@postgres:5432/daphne
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ADMIN_SECRET=daphne
      - HASURA_GRAPHQL_AUTH_HOOK=http://daphne:8001/
      - HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL=100
    container_name: daphne_graphql
  nodejs:
    image: node:latest
    ports:
      - "4001:4000"
      - "3000:3000"
    tty: true
    container_name: daphne_nodejs
    volumes:
      - type: bind
        source: ${ROOT_DIR}/databases/apollo
        target: /repos/apollo
      - type: bind
        source: ${ROOT_DIR}/databases/apollo-api
        target: /repos/apollo-api
  mock-sqs:
    image: softwaremill/elasticmq
    ports:
      - "9324:9324"
      - "9325:9325"
    container_name: mock_sqs
  vassar:
    build: ${ROOT_DIR}/codebase/design-evaluator
    image: vassar:alpha
    volumes:
      - type: bind
        source: ${ROOT_DIR}/codebase/design-evaluator
        target: /app
      - type: bind
        source: ${ROOT_DIR}/codebase/VASSAR_resources
        target: /resources
    ports:
      - "9091:9091"
      - "10000:10000"
    environment:
      - AWS_ACCESS_KEY_ID=AKIAJVM34C5MCCWRJCCQ
      - AWS_SECRET_ACCESS_KEY=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
      - AWS_STACK_ENDPOINT=http://mock-sqs:9324
      - REGION=elasticmq
      - REQUEST_MODE=CRISP-ATTRIBUTES
      - APOLLO_URL=http://graphql:8080/v1/graphql
      - APOLLO_URL_WS=ws://graphql:8080/v1/graphql
      - VASSAR_REQUEST_URL=http://localhost:9324/000000000000/vassar_request
      - VASSAR_RESPONSE_URL=http://localhost:9324/000000000000/vassar_response
      - DEPLOYMENT_TYPE=local
      - JAVA_OPTS=-Dcom.sun.management.jmxremote.rmi.port=10000 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=10000 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=localhost
    container_name: Vassar
    tty: true
  ga:
    build: ${ROOT_DIR}/codebase/genetic-algorithm
    image: ga:beta
    volumes:
      - type: bind
        source: ${ROOT_DIR}/codebase/genetic-algorithm
        target: /app
      - type: bind
        source: ${ROOT_DIR}/codebase/VASSAR_resources
        target: /resources
    ports:
      - "9092:9092"
    environment:
      - AWS_ACCESS_KEY_ID=AKIAJVM34C5MCCWRJCCQ
      - AWS_SECRET_ACCESS_KEY=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
      - AWS_STACK_ENDPOINT=http://mock-sqs:9324
      - REGION=elasticmq
      - APOLLO_URL=http://graphql:8080/v1/graphql
      - GA_REQUEST_URL=http://localhost:9324/000000000000/ga_request
      - GA_RESPONSE_URL=http://localhost:9324/000000000000/ga_response
      - MESSAGE_RETRIEVAL_SIZE=3
      - MESSAGE_QUERY_TIMEOUT=5
      - DEPLOYMENT_TYPE=local
    container_name: genetic-algorithm
    tty: true
  add:
    image: neo4j:latest
    ports: 
      - "7475:7474"
      - "7688:7687"
    container_name: add_database
    volumes: 
      - ${ROOT_DIR}/databases/neo4j_add/data:/data
      - ${ROOT_DIR}/databases/neo4j_add/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/test
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_security_procedures_whitelist=gds.*
  add_ga:
    build: ${ROOT_DIR}/codebase/decisions
    image: add_server:beta
    volumes:
      - type: bind
        source: ${ROOT_DIR}/codebase/decisions
        target: /app
    environment:
      - AWS_ACCESS_KEY_ID=AKIAJVM34C5MCCWRJCCQ
      - AWS_SECRET_ACCESS_KEY=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
      - AWS_STACK_ENDPOINT=http://mock-sqs:9324
      - NEO4J_URI=neo4j://add:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=test
      - PROBLEM=ClimateCentric
      - EVAL_QUEUE=add_queue
      - VASSAR_QUEUE=http://localhost:9324/000000000000/vassar_queue
    container_name: daphne_AddGA
    tty: true
